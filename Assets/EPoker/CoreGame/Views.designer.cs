// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace yigame.epoker {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UniRx;
    using UnityEngine;
    using yigame.epoker;
    
    
    public class CoreGameRootViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public uFrame.MVVM.ViewBase _BackGround;
        
        public override string DefaultIdentifier {
            get {
                return "CoreGameRoot";
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CoreGameRootViewModel);
            }
        }
        
        public CoreGameRootViewModel CoreGameRoot {
            get {
                return (CoreGameRootViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CoreGameRootViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var coregamerootview = ((CoreGameRootViewModel)model);
            coregamerootview.BackGround = this._BackGround == null ? null :  ViewService.FetchViewModel(this._BackGround) as BackGroundViewModel;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.CoreGameRoot to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
    }
    
    public class BackGroundViewBase : uFrame.MVVM.ViewBase {
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(BackGroundViewModel);
            }
        }
        
        public BackGroundViewModel BackGround {
            get {
                return (BackGroundViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as BackGroundViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.BackGround to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
    }
    
    public class CardViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CardInfo _Info;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CardFace _Face;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CardPlace _Place;
        
        [UFToggleGroup("Info")]
        [UnityEngine.HideInInspector()]
        public bool _BindInfo = true;
        
        [UFGroup("Info")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_InfoonlyWhenChanged")]
        protected bool _InfoOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CardViewModel);
            }
        }
        
        public CardViewModel Card {
            get {
                return (CardViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CardViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var cardview = ((CardViewModel)model);
            cardview.Info = this._Info;
            cardview.Face = this._Face;
            cardview.Place = this._Place;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Card to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindInfo) {
                this.BindProperty(this.Card.InfoProperty, this.InfoChanged, _InfoOnlyWhenChanged);
            }
        }
        
        public virtual void InfoChanged(CardInfo arg1) {
        }
    }
}
