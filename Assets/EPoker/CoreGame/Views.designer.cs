// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace yigame.epoker {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UniRx;
    using UnityEngine;
    using yigame.epoker;
    
    
    public class CoreGameRootViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public uFrame.MVVM.ViewBase _BackGround;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _PlayerCount;
        
        [UFToggleGroup("PlayerCollection")]
        [UnityEngine.HideInInspector()]
        public bool _BindPlayerCollection = true;
        
        [UFGroup("PlayerCollection")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_PlayerCollectionparent")]
        protected UnityEngine.Transform _PlayerCollectionParent;
        
        [UFGroup("PlayerCollection")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_PlayerCollectionviewFirst")]
        protected bool _PlayerCollectionViewFirst;
        
        [UFToggleGroup("TestSth")]
        [UnityEngine.HideInInspector()]
        public bool _BindTestSth = true;
        
        public override string DefaultIdentifier {
            get {
                return "CoreGameRoot";
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CoreGameRootViewModel);
            }
        }
        
        public CoreGameRootViewModel CoreGameRoot {
            get {
                return (CoreGameRootViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CoreGameRootViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var coregamerootview = ((CoreGameRootViewModel)model);
            coregamerootview.BackGround = this._BackGround == null ? null :  ViewService.FetchViewModel(this._BackGround) as BackGroundViewModel;
            coregamerootview.PlayerCount = this._PlayerCount;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.CoreGameRoot to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindPlayerCollection) {
                this.BindToViewCollection(this.CoreGameRoot.PlayerCollection, this.PlayerCollectionCreateView, this.PlayerCollectionAdded, this.PlayerCollectionRemoved, _PlayerCollectionParent, _PlayerCollectionViewFirst);
            }
            if (_BindTestSth) {
                this.BindCommandExecuted(this.CoreGameRoot.TestSth, this.TestSthExecuted);
            }
        }
        
        public virtual uFrame.MVVM.ViewBase PlayerCollectionCreateView(uFrame.MVVM.ViewModel viewModel) {
            return InstantiateView(viewModel);
        }
        
        public virtual void PlayerCollectionAdded(uFrame.MVVM.ViewBase view) {
        }
        
        public virtual void PlayerCollectionRemoved(uFrame.MVVM.ViewBase view) {
        }
        
        public virtual void TestSthExecuted(TestSthCommand command) {
        }
        
        public virtual void ExecuteTestSth() {
            CoreGameRoot.TestSth.OnNext(new TestSthCommand() { Sender = CoreGameRoot });
        }
        
        public virtual void ExecuteResetPlayerCount(ResetPlayerCountCommand command) {
            command.Sender = CoreGameRoot;
            CoreGameRoot.ResetPlayerCount.OnNext(command);
        }
        
        public virtual void ExecuteTestSth(TestSthCommand command) {
            command.Sender = CoreGameRoot;
            CoreGameRoot.TestSth.OnNext(command);
        }
        
        public virtual void ExecuteResetPlayerCount(Int32 arg) {
            CoreGameRoot.ResetPlayerCount.OnNext(new ResetPlayerCountCommand() { Sender = CoreGameRoot, Argument = arg });
        }
    }
    
    public class BackGroundViewBase : uFrame.MVVM.ViewBase {
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(BackGroundViewModel);
            }
        }
        
        public BackGroundViewModel BackGround {
            get {
                return (BackGroundViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as BackGroundViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.BackGround to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
    }
    
    public class CardViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CardInfo _Info;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CardFace _Face;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CardPlace _Place;
        
        [UFToggleGroup("Info")]
        [UnityEngine.HideInInspector()]
        public bool _BindInfo = true;
        
        [UFGroup("Info")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_InfoonlyWhenChanged")]
        protected bool _InfoOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CardViewModel);
            }
        }
        
        public CardViewModel Card {
            get {
                return (CardViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CardViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var cardview = ((CardViewModel)model);
            cardview.Info = this._Info;
            cardview.Face = this._Face;
            cardview.Place = this._Place;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Card to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindInfo) {
                this.BindProperty(this.Card.InfoProperty, this.InfoChanged, _InfoOnlyWhenChanged);
            }
        }
        
        public virtual void InfoChanged(CardInfo arg1) {
        }
    }
    
    public class PlayerViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Id;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _PosId;
        
        [UFToggleGroup("Status")]
        [UnityEngine.HideInInspector()]
        public bool _BindStatus = true;
        
        [UFGroup("Status")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_StatusonlyWhenChanged")]
        protected bool _StatusOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(PlayerViewModel);
            }
        }
        
        public PlayerViewModel Player {
            get {
                return (PlayerViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as PlayerViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var playerview = ((PlayerViewModel)model);
            playerview.Id = this._Id;
            playerview.PosId = this._PosId;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Player to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindStatus) {
                this.BindStateProperty(this.Player.StatusProperty, this.StatusChanged, _StatusOnlyWhenChanged);
            }
        }
        
        public virtual void StatusChanged(Invert.StateMachine.State arg1) {
            if (arg1 is Init) {
                this.OnInit();
            }
            if (arg1 is Ready) {
                this.OnReady();
            }
            if (arg1 is MatchPrepare) {
                this.OnMatchPrepare();
            }
            if (arg1 is MatchIdle) {
                this.OnMatchIdle();
            }
            if (arg1 is MatchDeal) {
                this.OnMatchDeal();
            }
            if (arg1 is MatchWin) {
                this.OnMatchWin();
            }
            if (arg1 is MatchOver) {
                this.OnMatchOver();
            }
            if (arg1 is Wait) {
                this.OnWait();
            }
        }
        
        public virtual void OnInit() {
        }
        
        public virtual void OnReady() {
        }
        
        public virtual void OnMatchPrepare() {
        }
        
        public virtual void OnMatchIdle() {
        }
        
        public virtual void OnMatchDeal() {
        }
        
        public virtual void OnMatchWin() {
        }
        
        public virtual void OnMatchOver() {
        }
        
        public virtual void OnWait() {
        }
    }
}
