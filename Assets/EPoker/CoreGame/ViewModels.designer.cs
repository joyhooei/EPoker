// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace yigame.epoker {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UnityEngine;
    using UniRx;
    using yigame.epoker;
    
    
    public partial class CoreGameRootViewModelBase : uFrame.MVVM.ViewModel {
        
        private CoreGameSM _CoreGameStatusProperty;
        
        private P<BackGroundViewModel> _BackGroundProperty;
        
        private P<Int32> _PlayerCountProperty;
        
        private P<CardsPileViewModel> _PileProperty;
        
        private P<String> _PlayerNameProperty;
        
        private P<ExitGames.Client.Photon.LoadBalancing.Room> _LBRoomProperty;
        
        private ModelCollection<PlayerViewModel> _PlayerCollection;
        
        private Signal<RefreshCoreGameCommand> _RefreshCoreGame;
        
        private Signal<RootMatchBeganCommand> _RootMatchBegan;
        
        private Signal<CreateDeckToPileCommand> _CreateDeckToPile;
        
        private Signal<DealPileCommand> _DealPile;
        
        private Signal<QuitCoreGameCommand> _QuitCoreGame;
        
        private Signal<PlayerJoinCommand> _PlayerJoin;
        
        private Signal<PlayerLeaveCommand> _PlayerLeave;
        
        private Signal<CalcPosIdAndReposCommand> _CalcPosIdAndRepos;
        
        public CoreGameRootViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual CoreGameSM CoreGameStatusProperty {
            get {
                return _CoreGameStatusProperty;
            }
            set {
                _CoreGameStatusProperty = value;
            }
        }
        
        public virtual Invert.StateMachine.State CoreGameStatus {
            get {
                return CoreGameStatusProperty.Value;
            }
            set {
                CoreGameStatusProperty.Value = value;
            }
        }
        
        public virtual P<BackGroundViewModel> BackGroundProperty {
            get {
                return _BackGroundProperty;
            }
            set {
                _BackGroundProperty = value;
            }
        }
        
        public virtual P<Int32> PlayerCountProperty {
            get {
                return _PlayerCountProperty;
            }
            set {
                _PlayerCountProperty = value;
            }
        }
        
        public virtual P<CardsPileViewModel> PileProperty {
            get {
                return _PileProperty;
            }
            set {
                _PileProperty = value;
            }
        }
        
        public virtual P<String> PlayerNameProperty {
            get {
                return _PlayerNameProperty;
            }
            set {
                _PlayerNameProperty = value;
            }
        }
        
        public virtual P<ExitGames.Client.Photon.LoadBalancing.Room> LBRoomProperty {
            get {
                return _LBRoomProperty;
            }
            set {
                _LBRoomProperty = value;
            }
        }
        
        public virtual BackGroundViewModel BackGround {
            get {
                return BackGroundProperty.Value;
            }
            set {
                BackGroundProperty.Value = value;
            }
        }
        
        public virtual Int32 PlayerCount {
            get {
                return PlayerCountProperty.Value;
            }
            set {
                PlayerCountProperty.Value = value;
            }
        }
        
        public virtual CardsPileViewModel Pile {
            get {
                return PileProperty.Value;
            }
            set {
                PileProperty.Value = value;
            }
        }
        
        public virtual String PlayerName {
            get {
                return PlayerNameProperty.Value;
            }
            set {
                PlayerNameProperty.Value = value;
            }
        }
        
        public virtual ExitGames.Client.Photon.LoadBalancing.Room LBRoom {
            get {
                return LBRoomProperty.Value;
            }
            set {
                LBRoomProperty.Value = value;
            }
        }
        
        public virtual ModelCollection<PlayerViewModel> PlayerCollection {
            get {
                return _PlayerCollection;
            }
            set {
                _PlayerCollection = value;
            }
        }
        
        public virtual Signal<RefreshCoreGameCommand> RefreshCoreGame {
            get {
                return _RefreshCoreGame;
            }
            set {
                _RefreshCoreGame = value;
            }
        }
        
        public virtual Signal<RootMatchBeganCommand> RootMatchBegan {
            get {
                return _RootMatchBegan;
            }
            set {
                _RootMatchBegan = value;
            }
        }
        
        public virtual Signal<CreateDeckToPileCommand> CreateDeckToPile {
            get {
                return _CreateDeckToPile;
            }
            set {
                _CreateDeckToPile = value;
            }
        }
        
        public virtual Signal<DealPileCommand> DealPile {
            get {
                return _DealPile;
            }
            set {
                _DealPile = value;
            }
        }
        
        public virtual Signal<QuitCoreGameCommand> QuitCoreGame {
            get {
                return _QuitCoreGame;
            }
            set {
                _QuitCoreGame = value;
            }
        }
        
        public virtual Signal<PlayerJoinCommand> PlayerJoin {
            get {
                return _PlayerJoin;
            }
            set {
                _PlayerJoin = value;
            }
        }
        
        public virtual Signal<PlayerLeaveCommand> PlayerLeave {
            get {
                return _PlayerLeave;
            }
            set {
                _PlayerLeave = value;
            }
        }
        
        public virtual Signal<CalcPosIdAndReposCommand> CalcPosIdAndRepos {
            get {
                return _CalcPosIdAndRepos;
            }
            set {
                _CalcPosIdAndRepos = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.RefreshCoreGame = new Signal<RefreshCoreGameCommand>(this);
            this.RootMatchBegan = new Signal<RootMatchBeganCommand>(this);
            this.CreateDeckToPile = new Signal<CreateDeckToPileCommand>(this);
            this.DealPile = new Signal<DealPileCommand>(this);
            this.QuitCoreGame = new Signal<QuitCoreGameCommand>(this);
            this.PlayerJoin = new Signal<PlayerJoinCommand>(this);
            this.PlayerLeave = new Signal<PlayerLeaveCommand>(this);
            this.CalcPosIdAndRepos = new Signal<CalcPosIdAndReposCommand>(this);
            _BackGroundProperty = new P<BackGroundViewModel>(this, "BackGround");
            _PlayerCountProperty = new P<Int32>(this, "PlayerCount");
            _PileProperty = new P<CardsPileViewModel>(this, "Pile");
            _PlayerNameProperty = new P<String>(this, "PlayerName");
            _LBRoomProperty = new P<ExitGames.Client.Photon.LoadBalancing.Room>(this, "LBRoom");
            _PlayerCollection = new ModelCollection<PlayerViewModel>(this, "PlayerCollection");
            _CoreGameStatusProperty = new CoreGameSM(this, "CoreGameStatus");
        }
        
        public virtual void ExecuteRefreshCoreGame() {
            this.RefreshCoreGame.OnNext(new RefreshCoreGameCommand());
        }
        
        public virtual void ExecuteRootMatchBegan() {
            this.RootMatchBegan.OnNext(new RootMatchBeganCommand());
        }
        
        public virtual void ExecuteCreateDeckToPile() {
            this.CreateDeckToPile.OnNext(new CreateDeckToPileCommand());
        }
        
        public virtual void ExecuteDealPile() {
            this.DealPile.OnNext(new DealPileCommand());
        }
        
        public virtual void ExecuteQuitCoreGame() {
            this.QuitCoreGame.OnNext(new QuitCoreGameCommand());
        }
        
        public virtual void ExecutePlayerJoin() {
            this.PlayerJoin.OnNext(new PlayerJoinCommand());
        }
        
        public virtual void ExecutePlayerLeave() {
            this.PlayerLeave.OnNext(new PlayerLeaveCommand());
        }
        
        public virtual void ExecuteCalcPosIdAndRepos() {
            this.CalcPosIdAndRepos.OnNext(new CalcPosIdAndReposCommand());
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            		if (stream.DeepSerialize) this.BackGround = stream.DeserializeObject<BackGroundViewModel>("BackGround");;
            this.PlayerCount = stream.DeserializeInt("PlayerCount");;
            this._CoreGameStatusProperty.SetState(stream.DeserializeString("CoreGameStatus"));
            		if (stream.DeepSerialize) this.Pile = stream.DeserializeObject<CardsPileViewModel>("Pile");;
            if (stream.DeepSerialize) {
                this.PlayerCollection.Clear();
                this.PlayerCollection.AddRange(stream.DeserializeObjectArray<PlayerViewModel>("PlayerCollection"));
            }
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            if (stream.DeepSerialize) stream.SerializeObject("BackGround", this.BackGround);;
            stream.SerializeInt("PlayerCount", this.PlayerCount);
            stream.SerializeString("CoreGameStatus", this.CoreGameStatus.Name);;
            if (stream.DeepSerialize) stream.SerializeObject("Pile", this.Pile);;
            if (stream.DeepSerialize) stream.SerializeArray("PlayerCollection", this.PlayerCollection);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("RefreshCoreGame", RefreshCoreGame) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("RootMatchBegan", RootMatchBegan) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("CreateDeckToPile", CreateDeckToPile) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("DealPile", DealPile) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("QuitCoreGame", QuitCoreGame) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("PlayerJoin", PlayerJoin) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("PlayerLeave", PlayerLeave) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("CalcPosIdAndRepos", CalcPosIdAndRepos) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_BackGroundProperty, true, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PlayerCountProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_CoreGameStatusProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PileProperty, true, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PlayerNameProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_LBRoomProperty, false, false, false, false));
            list.Add(new ViewModelPropertyInfo(_PlayerCollection, true, true, false, false));
        }
    }
    
    public partial class CoreGameRootViewModel {
        
        public CoreGameRootViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class BackGroundViewModelBase : uFrame.MVVM.ViewModel {
        
        public BackGroundViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public override void Bind() {
            base.Bind();
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
        }
    }
    
    public partial class BackGroundViewModel {
        
        public BackGroundViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class CardViewModelBase : uFrame.MVVM.ViewModel {
        
        private P<CardInfo> _InfoProperty;
        
        private P<CardFace> _FaceProperty;
        
        private P<CardPlace> _PlaceProperty;
        
        public CardViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<CardInfo> InfoProperty {
            get {
                return _InfoProperty;
            }
            set {
                _InfoProperty = value;
            }
        }
        
        public virtual P<CardFace> FaceProperty {
            get {
                return _FaceProperty;
            }
            set {
                _FaceProperty = value;
            }
        }
        
        public virtual P<CardPlace> PlaceProperty {
            get {
                return _PlaceProperty;
            }
            set {
                _PlaceProperty = value;
            }
        }
        
        public virtual CardInfo Info {
            get {
                return InfoProperty.Value;
            }
            set {
                InfoProperty.Value = value;
            }
        }
        
        public virtual CardFace Face {
            get {
                return FaceProperty.Value;
            }
            set {
                FaceProperty.Value = value;
            }
        }
        
        public virtual CardPlace Place {
            get {
                return PlaceProperty.Value;
            }
            set {
                PlaceProperty.Value = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _InfoProperty = new P<CardInfo>(this, "Info");
            _FaceProperty = new P<CardFace>(this, "Face");
            _PlaceProperty = new P<CardPlace>(this, "Place");
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            this.Face = (CardFace)stream.DeserializeInt("Face");;
            this.Place = (CardPlace)stream.DeserializeInt("Place");;
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeInt("Face", (int)this.Face);;
            stream.SerializeInt("Place", (int)this.Place);;
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_InfoProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_FaceProperty, false, false, true, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PlaceProperty, false, false, true, false));
        }
    }
    
    public partial class CardViewModel {
        
        public CardViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class PlayerViewModelBase : uFrame.MVVM.ViewModel {
        
        private PlayerStatus _StatusProperty;
        
        private P<String> _IdProperty;
        
        private P<Int32> _ActorIdProperty;
        
        private P<String> _PosIdProperty;
        
        private P<RoomIdentity> _PlayerRoomIdentityProperty;
        
        private P<String> _PlayerNameProperty;
        
        private P<Boolean> _IsSelfProperty;
        
        private P<String> _ReadyStatusTextProperty;
        
        private P<ExitGames.Client.Photon.LoadBalancing.Player> _LBPlayerProperty;
        
        private ModelCollection<CardViewModel> _HandCards;
        
        private Signal<PlayerReadyCommand> _PlayerReady;
        
        private Signal<PlayerCancelCommand> _PlayerCancel;
        
        private Signal<MatchBeganCommand> _MatchBegan;
        
        private Signal<BeganToPlayCommand> _BeganToPlay;
        
        private Signal<BeganToWaitCommand> _BeganToWait;
        
        private Signal<TurnOnCommand> _TurnOn;
        
        private Signal<TurnOffCommand> _TurnOff;
        
        private Signal<WinCommand> _Win;
        
        private Signal<OverCommand> _Over;
        
        private Signal<InitOKCommand> _InitOK;
        
        private Signal<RefreshPlayerCommand> _RefreshPlayer;
        
        private Signal<ButtonReadyClickedCommand> _ButtonReadyClicked;
        
        private Signal<ButtonStartClickedCommand> _ButtonStartClicked;
        
        public PlayerViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual PlayerStatus StatusProperty {
            get {
                return _StatusProperty;
            }
            set {
                _StatusProperty = value;
            }
        }
        
        public virtual Invert.StateMachine.State Status {
            get {
                return StatusProperty.Value;
            }
            set {
                StatusProperty.Value = value;
            }
        }
        
        public virtual P<String> IdProperty {
            get {
                return _IdProperty;
            }
            set {
                _IdProperty = value;
            }
        }
        
        public virtual P<Int32> ActorIdProperty {
            get {
                return _ActorIdProperty;
            }
            set {
                _ActorIdProperty = value;
            }
        }
        
        public virtual P<String> PosIdProperty {
            get {
                return _PosIdProperty;
            }
            set {
                _PosIdProperty = value;
            }
        }
        
        public virtual P<RoomIdentity> PlayerRoomIdentityProperty {
            get {
                return _PlayerRoomIdentityProperty;
            }
            set {
                _PlayerRoomIdentityProperty = value;
            }
        }
        
        public virtual P<String> PlayerNameProperty {
            get {
                return _PlayerNameProperty;
            }
            set {
                _PlayerNameProperty = value;
            }
        }
        
        public virtual P<Boolean> IsSelfProperty {
            get {
                return _IsSelfProperty;
            }
            set {
                _IsSelfProperty = value;
            }
        }
        
        public virtual P<String> ReadyStatusTextProperty {
            get {
                return _ReadyStatusTextProperty;
            }
            set {
                _ReadyStatusTextProperty = value;
            }
        }
        
        public virtual P<ExitGames.Client.Photon.LoadBalancing.Player> LBPlayerProperty {
            get {
                return _LBPlayerProperty;
            }
            set {
                _LBPlayerProperty = value;
            }
        }
        
        public virtual String Id {
            get {
                return IdProperty.Value;
            }
            set {
                IdProperty.Value = value;
            }
        }
        
        public virtual Int32 ActorId {
            get {
                return ActorIdProperty.Value;
            }
            set {
                ActorIdProperty.Value = value;
            }
        }
        
        public virtual String PosId {
            get {
                return PosIdProperty.Value;
            }
            set {
                PosIdProperty.Value = value;
            }
        }
        
        public virtual RoomIdentity PlayerRoomIdentity {
            get {
                return PlayerRoomIdentityProperty.Value;
            }
            set {
                PlayerRoomIdentityProperty.Value = value;
            }
        }
        
        public virtual String PlayerName {
            get {
                return PlayerNameProperty.Value;
            }
            set {
                PlayerNameProperty.Value = value;
            }
        }
        
        public virtual Boolean IsSelf {
            get {
                return IsSelfProperty.Value;
            }
            set {
                IsSelfProperty.Value = value;
            }
        }
        
        public virtual String ReadyStatusText {
            get {
                return ReadyStatusTextProperty.Value;
            }
            set {
                ReadyStatusTextProperty.Value = value;
            }
        }
        
        public virtual ExitGames.Client.Photon.LoadBalancing.Player LBPlayer {
            get {
                return LBPlayerProperty.Value;
            }
            set {
                LBPlayerProperty.Value = value;
            }
        }
        
        public virtual ModelCollection<CardViewModel> HandCards {
            get {
                return _HandCards;
            }
            set {
                _HandCards = value;
            }
        }
        
        public virtual Signal<PlayerReadyCommand> PlayerReady {
            get {
                return _PlayerReady;
            }
            set {
                _PlayerReady = value;
            }
        }
        
        public virtual Signal<PlayerCancelCommand> PlayerCancel {
            get {
                return _PlayerCancel;
            }
            set {
                _PlayerCancel = value;
            }
        }
        
        public virtual Signal<MatchBeganCommand> MatchBegan {
            get {
                return _MatchBegan;
            }
            set {
                _MatchBegan = value;
            }
        }
        
        public virtual Signal<BeganToPlayCommand> BeganToPlay {
            get {
                return _BeganToPlay;
            }
            set {
                _BeganToPlay = value;
            }
        }
        
        public virtual Signal<BeganToWaitCommand> BeganToWait {
            get {
                return _BeganToWait;
            }
            set {
                _BeganToWait = value;
            }
        }
        
        public virtual Signal<TurnOnCommand> TurnOn {
            get {
                return _TurnOn;
            }
            set {
                _TurnOn = value;
            }
        }
        
        public virtual Signal<TurnOffCommand> TurnOff {
            get {
                return _TurnOff;
            }
            set {
                _TurnOff = value;
            }
        }
        
        public virtual Signal<WinCommand> Win {
            get {
                return _Win;
            }
            set {
                _Win = value;
            }
        }
        
        public virtual Signal<OverCommand> Over {
            get {
                return _Over;
            }
            set {
                _Over = value;
            }
        }
        
        public virtual Signal<InitOKCommand> InitOK {
            get {
                return _InitOK;
            }
            set {
                _InitOK = value;
            }
        }
        
        public virtual Signal<RefreshPlayerCommand> RefreshPlayer {
            get {
                return _RefreshPlayer;
            }
            set {
                _RefreshPlayer = value;
            }
        }
        
        public virtual Signal<ButtonReadyClickedCommand> ButtonReadyClicked {
            get {
                return _ButtonReadyClicked;
            }
            set {
                _ButtonReadyClicked = value;
            }
        }
        
        public virtual Signal<ButtonStartClickedCommand> ButtonStartClicked {
            get {
                return _ButtonStartClicked;
            }
            set {
                _ButtonStartClicked = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.PlayerReady = new Signal<PlayerReadyCommand>(this);
            this.PlayerCancel = new Signal<PlayerCancelCommand>(this);
            this.MatchBegan = new Signal<MatchBeganCommand>(this);
            this.BeganToPlay = new Signal<BeganToPlayCommand>(this);
            this.BeganToWait = new Signal<BeganToWaitCommand>(this);
            this.TurnOn = new Signal<TurnOnCommand>(this);
            this.TurnOff = new Signal<TurnOffCommand>(this);
            this.Win = new Signal<WinCommand>(this);
            this.Over = new Signal<OverCommand>(this);
            this.InitOK = new Signal<InitOKCommand>(this);
            this.RefreshPlayer = new Signal<RefreshPlayerCommand>(this);
            this.ButtonReadyClicked = new Signal<ButtonReadyClickedCommand>(this);
            this.ButtonStartClicked = new Signal<ButtonStartClickedCommand>(this);
            _IdProperty = new P<String>(this, "Id");
            _ActorIdProperty = new P<Int32>(this, "ActorId");
            _PosIdProperty = new P<String>(this, "PosId");
            _PlayerRoomIdentityProperty = new P<RoomIdentity>(this, "PlayerRoomIdentity");
            _PlayerNameProperty = new P<String>(this, "PlayerName");
            _IsSelfProperty = new P<Boolean>(this, "IsSelf");
            _ReadyStatusTextProperty = new P<String>(this, "ReadyStatusText");
            _LBPlayerProperty = new P<ExitGames.Client.Photon.LoadBalancing.Player>(this, "LBPlayer");
            _HandCards = new ModelCollection<CardViewModel>(this, "HandCards");
            _StatusProperty = new PlayerStatus(this, "Status");
            PlayerReady.Subscribe(_ => StatusProperty.PlayerReady.OnNext(true));
            PlayerCancel.Subscribe(_ => StatusProperty.PlayerCancel.OnNext(true));
            MatchBegan.Subscribe(_ => StatusProperty.MatchBegan.OnNext(true));
            BeganToPlay.Subscribe(_ => StatusProperty.BeganToPlay.OnNext(true));
            BeganToWait.Subscribe(_ => StatusProperty.BeganToWait.OnNext(true));
            TurnOn.Subscribe(_ => StatusProperty.TurnOn.OnNext(true));
            TurnOff.Subscribe(_ => StatusProperty.TurnOff.OnNext(true));
            Win.Subscribe(_ => StatusProperty.Win.OnNext(true));
            Over.Subscribe(_ => StatusProperty.Over.OnNext(true));
            InitOK.Subscribe(_ => StatusProperty.InitOK.OnNext(true));
        }
        
        public virtual void ExecutePlayerReady() {
            this.PlayerReady.OnNext(new PlayerReadyCommand());
        }
        
        public virtual void ExecutePlayerCancel() {
            this.PlayerCancel.OnNext(new PlayerCancelCommand());
        }
        
        public virtual void ExecuteMatchBegan() {
            this.MatchBegan.OnNext(new MatchBeganCommand());
        }
        
        public virtual void ExecuteBeganToPlay() {
            this.BeganToPlay.OnNext(new BeganToPlayCommand());
        }
        
        public virtual void ExecuteBeganToWait() {
            this.BeganToWait.OnNext(new BeganToWaitCommand());
        }
        
        public virtual void ExecuteTurnOn() {
            this.TurnOn.OnNext(new TurnOnCommand());
        }
        
        public virtual void ExecuteTurnOff() {
            this.TurnOff.OnNext(new TurnOffCommand());
        }
        
        public virtual void ExecuteWin() {
            this.Win.OnNext(new WinCommand());
        }
        
        public virtual void ExecuteOver() {
            this.Over.OnNext(new OverCommand());
        }
        
        public virtual void ExecuteInitOK() {
            this.InitOK.OnNext(new InitOKCommand());
        }
        
        public virtual void ExecuteRefreshPlayer() {
            this.RefreshPlayer.OnNext(new RefreshPlayerCommand());
        }
        
        public virtual void ExecuteButtonReadyClicked() {
            this.ButtonReadyClicked.OnNext(new ButtonReadyClickedCommand());
        }
        
        public virtual void ExecuteButtonStartClicked() {
            this.ButtonStartClicked.OnNext(new ButtonStartClickedCommand());
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            this.ActorId = stream.DeserializeInt("ActorId");;
            this._StatusProperty.SetState(stream.DeserializeString("Status"));
            this.PlayerRoomIdentity = (RoomIdentity)stream.DeserializeInt("PlayerRoomIdentity");;
            this.IsSelf = stream.DeserializeBool("IsSelf");;
            if (stream.DeepSerialize) {
                this.HandCards.Clear();
                this.HandCards.AddRange(stream.DeserializeObjectArray<CardViewModel>("HandCards"));
            }
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeInt("ActorId", this.ActorId);
            stream.SerializeString("Status", this.Status.Name);;
            stream.SerializeInt("PlayerRoomIdentity", (int)this.PlayerRoomIdentity);;
            stream.SerializeBool("IsSelf", this.IsSelf);
            if (stream.DeepSerialize) stream.SerializeArray("HandCards", this.HandCards);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("PlayerReady", PlayerReady) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("PlayerCancel", PlayerCancel) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("MatchBegan", MatchBegan) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("BeganToPlay", BeganToPlay) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("BeganToWait", BeganToWait) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("TurnOn", TurnOn) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("TurnOff", TurnOff) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("Win", Win) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("Over", Over) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("InitOK", InitOK) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("RefreshPlayer", RefreshPlayer) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("ButtonReadyClicked", ButtonReadyClicked) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("ButtonStartClicked", ButtonStartClicked) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_IdProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_ActorIdProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_StatusProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PosIdProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PlayerRoomIdentityProperty, false, false, true, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PlayerNameProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_IsSelfProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_ReadyStatusTextProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_LBPlayerProperty, false, false, false, false));
            list.Add(new ViewModelPropertyInfo(_HandCards, true, true, false, false));
        }
    }
    
    public partial class PlayerViewModel {
        
        public PlayerViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class CardsPileViewModelBase : uFrame.MVVM.ViewModel {
        
        private ModelCollection<CardViewModel> _Cards;
        
        public CardsPileViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual ModelCollection<CardViewModel> Cards {
            get {
                return _Cards;
            }
            set {
                _Cards = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _Cards = new ModelCollection<CardViewModel>(this, "Cards");
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            if (stream.DeepSerialize) {
                this.Cards.Clear();
                this.Cards.AddRange(stream.DeserializeObjectArray<CardViewModel>("Cards"));
            }
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            if (stream.DeepSerialize) stream.SerializeArray("Cards", this.Cards);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            list.Add(new ViewModelPropertyInfo(_Cards, true, true, false, false));
        }
    }
    
    public partial class CardsPileViewModel {
        
        public CardsPileViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
