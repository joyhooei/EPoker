// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace yigame.epoker {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UniRx;
    using UnityEngine;
    using yigame.epoker;
    
    
    public class OutOfGameRootViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public uFrame.MVVM.ViewBase _CanvasRoot;
        
        [UFToggleGroup("UIFlowStatus")]
        [UnityEngine.HideInInspector()]
        public bool _BindUIFlowStatus = true;
        
        [UFGroup("UIFlowStatus")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_UIFlowStatusonlyWhenChanged")]
        protected bool _UIFlowStatusOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return "OutOfGameRoot";
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(OutOfGameRootViewModel);
            }
        }
        
        public OutOfGameRootViewModel OutOfGameRoot {
            get {
                return (OutOfGameRootViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as OutOfGameRootViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var outofgamerootview = ((OutOfGameRootViewModel)model);
            outofgamerootview.CanvasRoot = this._CanvasRoot == null ? null :  ViewService.FetchViewModel(this._CanvasRoot) as CanvasRootViewModel;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.OutOfGameRoot to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindUIFlowStatus) {
                this.BindStateProperty(this.OutOfGameRoot.UIFlowStatusProperty, this.UIFlowStatusChanged, _UIFlowStatusOnlyWhenChanged);
            }
        }
        
        public virtual void UIFlowStatusChanged(Invert.StateMachine.State arg1) {
            if (arg1 is UILogin) {
                this.OnUILogin();
            }
            if (arg1 is UILobby) {
                this.OnUILobby();
            }
            if (arg1 is UIRoom) {
                this.OnUIRoom();
            }
        }
        
        public virtual void OnUILogin() {
        }
        
        public virtual void OnUILobby() {
        }
        
        public virtual void OnUIRoom() {
        }
        
        public virtual void ExecuteDoLogin() {
            OutOfGameRoot.DoLogin.OnNext(new DoLoginCommand() { Sender = OutOfGameRoot });
        }
        
        public virtual void ExecuteDoEnterRoom() {
            OutOfGameRoot.DoEnterRoom.OnNext(new DoEnterRoomCommand() { Sender = OutOfGameRoot });
        }
        
        public virtual void ExecuteDoQuitRoom() {
            OutOfGameRoot.DoQuitRoom.OnNext(new DoQuitRoomCommand() { Sender = OutOfGameRoot });
        }
        
        public virtual void ExecuteDoLogin(DoLoginCommand command) {
            command.Sender = OutOfGameRoot;
            OutOfGameRoot.DoLogin.OnNext(command);
        }
        
        public virtual void ExecuteDoEnterRoom(DoEnterRoomCommand command) {
            command.Sender = OutOfGameRoot;
            OutOfGameRoot.DoEnterRoom.OnNext(command);
        }
        
        public virtual void ExecuteDoQuitRoom(DoQuitRoomCommand command) {
            command.Sender = OutOfGameRoot;
            OutOfGameRoot.DoQuitRoom.OnNext(command);
        }
    }
    
    public class CanvasRootViewBase : uFrame.MVVM.ViewBase {
        
        [UFToggleGroup("PanelCollection")]
        [UnityEngine.HideInInspector()]
        public bool _BindPanelCollection = true;
        
        [UFGroup("PanelCollection")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_PanelCollectionparent")]
        protected UnityEngine.Transform _PanelCollectionParent;
        
        [UFGroup("PanelCollection")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_PanelCollectionviewFirst")]
        protected bool _PanelCollectionViewFirst;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CanvasRootViewModel);
            }
        }
        
        public CanvasRootViewModel CanvasRoot {
            get {
                return (CanvasRootViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CanvasRootViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.CanvasRoot to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindPanelCollection) {
                this.BindToViewCollection(this.CanvasRoot.PanelCollection, this.PanelCollectionCreateView, this.PanelCollectionAdded, this.PanelCollectionRemoved, _PanelCollectionParent, _PanelCollectionViewFirst);
            }
        }
        
        public virtual uFrame.MVVM.ViewBase PanelCollectionCreateView(uFrame.MVVM.ViewModel viewModel) {
            return InstantiateView(viewModel);
        }
        
        public virtual void PanelCollectionAdded(uFrame.MVVM.ViewBase view) {
        }
        
        public virtual void PanelCollectionRemoved(uFrame.MVVM.ViewBase view) {
        }
        
        public virtual void ExecuteOpenClosePanel(OpenClosePanelCommand command) {
            command.Sender = CanvasRoot;
            CanvasRoot.OpenClosePanel.OnNext(command);
        }
    }
    
    public class PanelViewBase : uFrame.MVVM.ViewBase {
        
        [UFToggleGroup("PanelIn")]
        [UnityEngine.HideInInspector()]
        public bool _BindPanelIn = true;
        
        [UFToggleGroup("PanelOut")]
        [UnityEngine.HideInInspector()]
        public bool _BindPanelOut = true;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(PanelViewModel);
            }
        }
        
        public PanelViewModel Panel {
            get {
                return (PanelViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as PanelViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Panel to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindPanelIn) {
                this.BindCommandExecuted(this.Panel.PanelIn, this.PanelInExecuted);
            }
            if (_BindPanelOut) {
                this.BindCommandExecuted(this.Panel.PanelOut, this.PanelOutExecuted);
            }
        }
        
        public virtual void PanelInExecuted(PanelInCommand command) {
        }
        
        public virtual void PanelOutExecuted(PanelOutCommand command) {
        }
        
        public virtual void ExecutePanelIn() {
            Panel.PanelIn.OnNext(new PanelInCommand() { Sender = Panel });
        }
        
        public virtual void ExecutePanelOut() {
            Panel.PanelOut.OnNext(new PanelOutCommand() { Sender = Panel });
        }
        
        public virtual void ExecutePanelIn(PanelInCommand command) {
            command.Sender = Panel;
            Panel.PanelIn.OnNext(command);
        }
        
        public virtual void ExecutePanelOut(PanelOutCommand command) {
            command.Sender = Panel;
            Panel.PanelOut.OnNext(command);
        }
    }
    
    public class LoginPanelViewBase : PanelView {
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(LoginPanelViewModel);
            }
        }
        
        public LoginPanelViewModel LoginPanel {
            get {
                return (LoginPanelViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as LoginPanelViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.LoginPanel to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
    }
    
    public class LobbyPanelViewBase : uFrame.MVVM.ViewBase {
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(LobbyPanelViewModel);
            }
        }
        
        public LobbyPanelViewModel LobbyPanel {
            get {
                return (LobbyPanelViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as LobbyPanelViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.LobbyPanel to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
        
        public virtual void ExecutePanelIn() {
            LobbyPanel.PanelIn.OnNext(new PanelInCommand() { Sender = LobbyPanel });
        }
        
        public virtual void ExecutePanelOut() {
            LobbyPanel.PanelOut.OnNext(new PanelOutCommand() { Sender = LobbyPanel });
        }
        
        public virtual void ExecutePanelIn(PanelInCommand command) {
            command.Sender = LobbyPanel;
            LobbyPanel.PanelIn.OnNext(command);
        }
        
        public virtual void ExecutePanelOut(PanelOutCommand command) {
            command.Sender = LobbyPanel;
            LobbyPanel.PanelOut.OnNext(command);
        }
    }
    
    public class RoomPanelViewBase : PanelView {
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(RoomPanelViewModel);
            }
        }
        
        public RoomPanelViewModel RoomPanel {
            get {
                return (RoomPanelViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as RoomPanelViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.RoomPanel to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
    }
}
